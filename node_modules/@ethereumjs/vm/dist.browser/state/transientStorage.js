"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
function copyTransientStorage(input) {
    var e_1, _a, e_2, _b;
    var map = new Map();
    try {
        for (var _c = __values(input.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), addr = _e[0], storage = _e[1];
            var copy = new Map();
            try {
                for (var _f = (e_2 = void 0, __values(storage.entries())), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read(_g.value, 2), key = _h[0], value = _h[1];
                    copy.set(key, value);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
            map.set(addr, copy);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return map;
}
/**
 * Merge all the keys from the additional changes into the base, if they aren't already present
 * @param base the base changeset, no keys will be overwritten
 * @param additionalChanges the additional changes that occurred in the nested context
 */
function mergeInto(base, additionalChanges) {
    var e_3, _a, e_4, _b;
    try {
        for (var _c = __values(additionalChanges.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = __read(_d.value, 2), addr = _e[0], storage = _e[1];
            if (!base.has(addr)) {
                base.set(addr, new Map());
            }
            var map = base.get(addr);
            try {
                for (var _f = (e_4 = void 0, __values(storage.entries())), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var _h = __read(_g.value, 2), key = _h[0], value = _h[1];
                    if (!map.has(key))
                        map.set(key, value);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
        }
        finally { if (e_3) throw e_3.error; }
    }
}
var TransientStorage = /** @class */ (function () {
    function TransientStorage(opts) {
        if (opts === void 0) { opts = {}; }
        var _a, _b;
        this._storage = (_a = opts.storage) !== null && _a !== void 0 ? _a : new Map();
        this._changesets = (_b = opts.changesets) !== null && _b !== void 0 ? _b : [new Map()];
    }
    Object.defineProperty(TransientStorage.prototype, "latestChangeset", {
        get: function () {
            if (this._changesets.length === 0) {
                throw new Error('no changeset initialized');
            }
            return this._changesets[this._changesets.length - 1];
        },
        enumerable: false,
        configurable: true
    });
    TransientStorage.prototype.recordModification = function (modification) {
        var latest = this.latestChangeset;
        var addrString = modification.addr.toString();
        if (!latest.has(addrString)) {
            latest.set(addrString, new Map());
        }
        var addrMap = latest.get(addrString);
        var keyString = modification.key.toString('hex');
        // we only need the previous value for the first time the addr-key has been changed since the last checkpoint
        if (!addrMap.has(keyString)) {
            addrMap.set(keyString, modification.prevValue);
        }
    };
    TransientStorage.prototype.get = function (addr, key) {
        var map = this._storage.get(addr.toString());
        if (!map) {
            return Buffer.alloc(32);
        }
        var value = map.get(key.toString('hex'));
        if (!value) {
            return Buffer.alloc(32);
        }
        return value;
    };
    TransientStorage.prototype.put = function (addr, key, value) {
        var _a;
        if (key.length !== 32) {
            throw new Error('Transient storage key must be 32 bytes long');
        }
        if (value.length > 32) {
            throw new Error('Transient storage value cannot be longer than 32 bytes');
        }
        if (!this._storage.has(addr.toString())) {
            this._storage.set(addr.toString(), new Map());
        }
        var map = this._storage.get(addr.toString());
        var str = key.toString('hex');
        var prevValue = (_a = map.get(str)) !== null && _a !== void 0 ? _a : Buffer.alloc(32);
        this.recordModification({
            addr: addr,
            key: key,
            prevValue: prevValue,
        });
        map.set(str, value);
    };
    TransientStorage.prototype.revert = function () {
        var e_5, _a, e_6, _b;
        var changeset = this._changesets.pop();
        if (!changeset) {
            throw new Error('cannot revert without a changeset');
        }
        try {
            for (var _c = __values(changeset.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), addr = _e[0], map = _e[1];
                try {
                    for (var _f = (e_6 = void 0, __values(map.entries())), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var _h = __read(_g.value, 2), key = _h[0], prevValue = _h[1];
                        var storageMap = this._storage.get(addr);
                        storageMap.set(key, prevValue);
                    }
                }
                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_6) throw e_6.error; }
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    TransientStorage.prototype.commit = function () {
        // Don't allow there to be no changeset
        if (this._changesets.length <= 1) {
            throw new Error('trying to commit when not checkpointed');
        }
        var changeset = this._changesets.pop();
        mergeInto(this.latestChangeset, changeset);
    };
    TransientStorage.prototype.checkpoint = function () {
        this._changesets.push(new Map());
    };
    TransientStorage.prototype.toJSON = function () {
        var e_7, _a, e_8, _b;
        var obj = {};
        try {
            for (var _c = __values(this._storage.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 2), address = _e[0], map = _e[1];
                obj[address.toString()] = {};
                try {
                    for (var _f = (e_8 = void 0, __values(map.entries())), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var _h = __read(_g.value, 2), key = _h[0], value = _h[1];
                        obj[address.toString()][key] = value.toString('hex');
                    }
                }
                catch (e_8_1) { e_8 = { error: e_8_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_8) throw e_8.error; }
                }
            }
        }
        catch (e_7_1) { e_7 = { error: e_7_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_7) throw e_7.error; }
        }
        return obj;
    };
    TransientStorage.prototype.clear = function () {
        this._storage = new Map();
        this._changesets = [new Map()];
    };
    TransientStorage.prototype.copy = function () {
        return new TransientStorage({
            storage: copyTransientStorage(this._storage),
            changesets: this._changesets.slice().map(copyTransientStorage),
        });
    };
    return TransientStorage;
}());
exports.default = TransientStorage;
//# sourceMappingURL=transientStorage.js.map